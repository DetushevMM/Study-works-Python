# "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–∏—Å—Ç–µ–º —Å—á–∏—Å–ª–µ–Ω–∏—è"

#- –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ –∏–∑ –ª—é–±–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è (2/8/10/16)
#- –≤ –ª—é–±—É—é –¥—Ä—É–≥—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è (2/8/10/16)
#- –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –±—É–∫–≤—ã A‚ÄìF –≤ 16-—Ä–∏—á–Ω–æ–π, —Ç–∞–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—à–∏–±–æ–∫
#- —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å, –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ

def to_decimal(number_str, base_from):
    try:
        return int(number_str, base_from)
    except ValueError:
        print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —á–∏—Å–ª–æ –¥–ª—è —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è.")
        return None

def from_decimal(number_dec, base_to):
    if base_to == 2:
        return bin(number_dec)[2:]
    elif base_to == 8:
        return oct(number_dec)[2:]
    elif base_to == 10:
        return str(number_dec)
    elif base_to == 16:
        return hex(number_dec)[2:].upper()
    else:
        return None

def ask_base(message):
    while True:
        base = input(message)
        if base in ['2', '8', '10', '16']:
            return int(base)
        print("–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 2, 8, 10, 16.")

def main():
    print("üßÆ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å–∏—Å—Ç–µ–º —Å—á–∏—Å–ª–µ–Ω–∏—è (2 / 8 / 10 / 16)")

    base_from = ask_base("–ò–∑ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏–º? (2/8/10/16): ")
    number = input(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è {base_from}: ").strip()

    base_to = ask_base("–í –∫–∞–∫—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏–º? (2/8/10/16): ")

    decimal_value = to_decimal(number, base_from)
    if decimal_value is None:
        return  # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞

    result = from_decimal(decimal_value, base_to)
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result} (–≤ —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è {base_to})")

if __name__ == "__main__":
    main()